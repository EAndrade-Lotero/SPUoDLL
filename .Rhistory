setwd("~/Repositorios/SPUoDLL")
library(lme4)
library(psych)
library(dplyr)
###########################################
###########################################
# PERFORMANCES
###########################################
###########################################
data = read.csv('performances.csv')
data$treatment = as.factor(data$treatment)
data$queried = as.integer(data$queried)
fun <- function(x) {
if (is.na(x)) {return(0)}
else if (x==0) {return(0)}
else {return(1)}
}
data$queried = unlist(lapply(data$queried, FUN = fun))
hist(df2$new_use)
fun_internal <- function(queried,accuracy) {
if (queried == 1 & accuracy == 1) {return(1)}
else {return(0)}
}
df <- data %>%
filter(stage == 'Game rounds') %>%
filter(treatment == 'paired') %>%
filter(expert_dog == 'False') %>%
select(player,round,queried,accuracy) %>%
mutate(
internal_accu = (1-queried)*accuracy,
external_accu = queried*accuracy
)
head(df)
df1 <- df %>%
group_by(player,round) %>%
summarize(
queried = mean(queried),
acc_internal_ = mean(internal_accu),
acc_external_ = mean(external_accu)
)
df1$aux <- 1
df1$new_use <- lead(df1$queried, 1)
head(df1)
df2 <- df1 %>%
mutate(
acc_internal = cumsum(acc_internal_)/cumsum(aux),
acc_external = cumsum(acc_external_)/cumsum(aux)
) %>%
select(player,round,new_use,queried,acc_internal,acc_external)
df2 = df2[complete.cases(df2),]
head(df2)
hist(df2$new_use)
fun_extreme <- function(x) {
if (x>.5) {return(1)}
else {return(0)}
}
df2$new_query = lapply(df2$new_use, fun_extreme)
df2$new_query = unlist(df2$new_query)
plot(x=df2$queried, y=df2$new_query)
plot(x=df2$acc_internal, y=df2$new_use)
plot(x=df2$queried, y=df2$new_query)
plot(x=df2$acc_internal, y=df2$new_query)
plot(x=df2$acc_external, y=df2$new_query)
model = glmer(
'new_query ~ queried + acc_internal + acc_external (1|round)',
data = data_game_novices,
family = binomial
)
model = glmer(
'new_query ~ queried + acc_internal + acc_external (1|round)',
data = df2,
family = binomial
)
df2
model = glmer(
'new_query ~ queried + acc_internal + acc_external + (1|round)',
data = df2,
family = binomial
)
summary(model)
lattice::dotplot(ranef(m3a, which = "HID", condVar = TRUE))
lattice::dotplot(ranef(model, which = "round", condVar = TRUE))
model = glmer(
'new_query ~ queried + acc_internal + acc_external + (acc_internal|round)',
data = df2,
family = binomial
)
summary(model)
plot_model(model, type = "int")+theme_ggeffects()
library(tidyverse) # data wrangling and visualization
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse) # data wrangling and visualization
library(sjPlot)    # to visualizing mixed-effects models
library(effects)   # to visualizing mixed-effects models
install.packages("effects")
library(effects)   # to visualizing mixed-effects models
library(lmerTest)  # p-values for MEMs based on the Satterthwaite approximation
library(report)    # mainly for an "report" function
install.packages("report")
library(report)    # mainly for an "report" function
library(emmeans)   # post-hoc analysis
library(knitr)     # beautifying tables
library(sjstats)   # ICC - intraclass-correlation coefficient
library(caret)     # ML, model comparison & utility functions
install.packages("caret")
###########################################
###########################################
# PERFORMANCES
###########################################
###########################################
data = read.csv('performances.csv')
data$treatment = as.factor(data$treatment)
data$queried = as.integer(data$queried)
fun <- function(x) {
if (is.na(x)) {return(0)}
else if (x==0) {return(0)}
else {return(1)}
}
data$queried = unlist(lapply(data$queried, FUN = fun))
fun_internal <- function(queried,accuracy) {
if (queried == 1 & accuracy == 1) {return(1)}
else {return(0)}
}
df <- data %>%
filter(stage == 'Game rounds') %>%
filter(treatment == 'paired') %>%
filter(expert_dog == 'False') %>%
select(player,round,queried,accuracy) %>%
mutate(
internal_accu = (1-queried)*accuracy,
external_accu = queried*accuracy
)
head(df)
df1 <- df %>%
group_by(player,round) %>%
summarize(
queried = mean(queried),
acc_internal_ = mean(internal_accu),
acc_external_ = mean(external_accu)
)
df1$aux <- 1
df1$new_use <- lead(df1$queried, 1)
head(df1)
df2 <- df1 %>%
mutate(
acc_internal = cumsum(acc_internal_)/cumsum(aux),
acc_external = cumsum(acc_external_)/cumsum(aux)
) %>%
select(player,round,new_use,queried,acc_internal,acc_external)
df2 = df2[complete.cases(df2),]
head(df2)
fun_extreme <- function(x) {
if (x>.5) {return(1)}
else {return(0)}
}
df2$new_query = lapply(df2$new_use, fun_extreme)
df2$new_query = unlist(df2$new_query)
plot(x=df2$queried, y=df2$new_query)
plot(x=df2$acc_internal, y=df2$new_query)
plot(x=df2$acc_external, y=df2$new_query)
model = glmer(
'new_query ~ queried + acc_internal + acc_external + (acc_internal|round)',
data = df2,
family = binomial
)
summary(model)
plot_model(model, type = "int")+theme_ggeffects()
plot_model(model, type = "int")
plot_model(model)+theme_ggeffects()
plot_model(model)
car::vif(model)
head(df2)
model = lm(new_use ~ queried + acc_internal + acc_external, data = df2)
summary(model)
par(mfrow = c(2, 2))
plot(model)
m_weighted <- update(model, weights = varIdent())
library(nlme)
model = lme(new_use ~ queried + acc_internal + acc_external, data = df2)
model = lme(new_use ~ queried + acc_internal + acc_external, random = ~1|round, data = df2)
performance::check_model(m)
performance::check_model(model)
install.packages("see")
library(nlme)
model = lme(new_use ~ queried + acc_internal + acc_external, random = ~1|round, data = df2)
performance::check_model(model)
library(lme4)
library(psych)
library(dplyr)
library(tidyverse) # data wrangling and visualization
library(sjPlot)    # to visualizing mixed-effects models
library(effects)   # to visualizing mixed-effects models
library(lmerTest)  # p-values for MEMs based on the Satterthwaite approximation
library(report)    # mainly for an "report" function
library(emmeans)   # post-hoc analysis
library(knitr)     # beautifying tables
library(sjstats)   # ICC - intraclass-correlation coefficient
library(caret)     # ML, model comparison & utility functions
###########################################
###########################################
# PERFORMANCES
###########################################
###########################################
data = read.csv('performances.csv')
data$treatment = as.factor(data$treatment)
data$queried = as.integer(data$queried)
fun <- function(x) {
if (is.na(x)) {return(0)}
else if (x==0) {return(0)}
else {return(1)}
}
data$queried = unlist(lapply(data$queried, FUN = fun))
data_training = data[data['stage']=='Training rounds',]
fun_internal <- function(queried,accuracy) {
if (queried == 1 & accuracy == 1) {return(1)}
else {return(0)}
}
df <- data %>%
filter(stage == 'Game rounds') %>%
filter(treatment == 'paired') %>%
filter(expert_dog == 'False') %>%
select(player,round,queried,accuracy) %>%
mutate(
internal_accu = (1-queried)*accuracy,
external_accu = queried*accuracy
)
head(df)
df1 <- df %>%
group_by(player,round) %>%
summarize(
queried = mean(queried),
acc_internal_ = mean(internal_accu),
acc_external_ = mean(external_accu)
)
df1$aux <- 1
df1$new_use <- lead(df1$queried, 1)
head(df1)
df2 <- df1 %>%
mutate(
acc_internal = cumsum(acc_internal_)/cumsum(aux),
acc_external = cumsum(acc_external_)/cumsum(aux)
) %>%
select(player,round,new_use,queried,acc_internal,acc_external)
df2 = df2[complete.cases(df2),]
head(df2)
library(nlme)
model = lme(new_use ~ queried + acc_internal + acc_external, random = ~1|round, data = df2)
performance::check_model(model)
install.packages('patchwork')
library(nlme)
model = lme(new_use ~ queried + acc_internal + acc_external, random = ~1|round, data = df2)
performance::check_model(model)
m_weighted <- update(model, weights = varIdent())
plot(m_weighted)
fun_extreme <- function(x) {
if (x>.5) {return(1)}
else {return(0)}
}
df2$new_query = lapply(df2$new_use, fun_extreme)
df2$new_query = unlist(df2$new_query)
model = glmer(
'new_query ~ queried + acc_internal + acc_external + (acc_internal|round)',
data = df2,
family = binomial
)
summary(model)
model = glmer(
'new_query ~ queried + acc_internal + acc_external + (acc_internal|round) + (acc_external|round)',
data = df2,
family = binomial
)
summary(model)
model = glmer(
'new_query ~ queried + acc_internal + acc_external + (acc_internal|round) + (acc_external|round)',
data = df2,
family = binomial
)
summary(model)
plot_model(model)
plot(model)
library(nlme)
model = lme(new_use ~ queried + acc_internal + acc_external, random = ~1|round, data = df2)
performance::check_model(model)
model = lme(sqrt(new_use) ~ queried + acc_internal + acc_external, random = ~1|round, data = df2)
performance::check_model(model)
model = lme(log(new_use) ~ queried + acc_internal + acc_external, random = ~1|round, data = df2)
library(nlme)
model = lme(log(new_use) ~ queried + acc_internal + acc_external, random = ~1|round, data = df2)
performance::check_model(model)
lattice::dotplot(ranef(model, which = "round", condVar = TRUE))
model = glmer(
'new_query ~ queried + acc_internal + acc_external + (acc_internal|round) + (acc_external|round)',
data = df2,
family = binomial
)
summary(model)
model = glmer(
'new_query ~ acc_internal + acc_external + (acc_internal|round) + (acc_external|round)',
data = df2,
family = binomial
)
summary(model)
plot(model)
car::vif(model)
caret::vif(model)
lattice::dotplot(ranef(model, which = "round", condVar = TRUE))
hist(df2$new_use)
plot(df2$new_query)
barplot(df2$new_query)
hist(df2$new_use)
model = lme(log(new_use) ~ queried + acc_internal + acc_external, random = ~1|round, data = df2)
performance::check_model(model)
head(df2)
model = lme(log(new_use) ~ queried + acc_internal + acc_external, random = ~1|round, data = df2)
performance::check_model(model)
hist(df2$new_use)
m_weighted <- update(model, weights = varIdent())
plot(m_weighted)
model = glmer(
'new_query ~ acc_internal + acc_external + (acc_internal|round) + (acc_external|round)',
data = df2,
family = binomial
)
summary(model)
plot(model)
model = lme(log(new_use) ~ acc_internal + acc_external, random = ~1|round, data = df2)
model = lme(new_use ~ acc_internal + acc_external, random = ~1|round, data = df2)
performance::check_model(model)
summary(model)
model = lme(new_use ~ acc_internal + acc_external, data = df2)
model = lme(new_use ~ acc_internal + acc_external, random = ~1|round, data = df2)
summary(model)
performance::check_model(model)
model = lm(new_use ~ acc_internal + acc_external, data = df2)
summary(model)
model = lm(new_use ~ acc_internal + acc_external, data = df2)
summary(model)
performance::check_model(model)
model = lme(new_use ~ acc_internal + acc_external, random = ~1|round, data = df2)
summary(model)
performance::check_model(model)
m_weighted <- update(model, weights = varIdent())
m_weighted <- update(model, weights = varIdent())
summary(m_weightedl)
performance::check_model(m_weighted)
model = lme(new_use ~ acc_internal + acc_external, random = ~1|round, data = df2)
summary(model)
performance::check_model(model)
