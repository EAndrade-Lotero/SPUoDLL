setwd("~/Repositorios/SPUoDLL")
library(psych)
library(dplyr)
library(nlme)
library(tidyverse) # data wrangling and visualization
library(sjPlot)    # to visualizing mixed-effects models
library(effects)   # to visualizing mixed-effects models
library(lmerTest)  # p-values for MEMs based on the Satterthwaite approximation
library(report)    # mainly for an "report" function
library(emmeans)   # post-hoc analysis
library(knitr)     # beautifying tables
library(sjstats)   # ICC - intraclass-correlation coefficient
library(caret)     # ML, model comparison & utility functions
library(ggplot2)
library(lawstat)
library(comprehenr)
###########################################
###########################################
# PERFORMANCES
###########################################
###########################################
data = read.csv('performances.csv')
data$treatment = as.factor(data$treatment)
data$queried = as.integer(data$queried)
fun <- function(x) {
if (is.na(x)) {return(0)}
else if (x==0) {return(0)}
else {return(1)}
}
data$queried = unlist(lapply(data$queried, FUN = fun))
df <- data %>%
filter(treatment == 'paired') %>%
filter(stage == 'Game rounds') %>%
select(dyad, player, queried) %>%
group_by(dyad, player) %>%
summarize(queried = sum(queried)) %>%
ungroup() %>%
group_by(dyad) %>%
mutate(queriedMost = max(queried),
queriedLeast = min(queried)) %>%
ungroup()
df <- slice(df, seq(1, dim(df)[1], 2))
head(df)
dim(df)
plot(df$queriedMost, df$queriedLeast)
x = unlist(df$queriedMost)
y = unlist(df$queriedLeast)
cor.test(x, y, method=c("pearson", "kendall", "spearman"))
plot(df$queriedMost, df$queriedLeast)
# head(data)
df <- data %>%
filter(treatment == 'paired') %>%
filter(stage == 'Game rounds') %>%
select(dyad, player, queried) %>%
group_by(dyad, player) %>%
summarize(queried = sum(queried)) %>%
ungroup() %>%
group_by(dyad) %>%
mutate(queriedMost = max(queried),
queriedLeast = min(queried)) %>%
ungroup()
df <- slice(df, seq(1, dim(df)[1], 2))
head(df)
# head(data)
df <- data %>%
filter(treatment == 'paired') %>%
filter(stage == 'Game rounds') %>%
select(dyad, player, queried) %>%
group_by(dyad, player) %>%
summarize(queried = sum(queried)) %>%
ungroup() %>%
group_by(dyad) %>%
mutate(queriedMost = max(queried),
queriedLeast = min(queried)) %>%
ungroup()
# df <- slice(df, seq(1, dim(df)[1], 2))
head(df)
# head(data)
df <- data %>%
filter(treatment == 'paired') %>%
filter(stage == 'Game rounds') %>%
select(dyad, player, queried) %>%
group_by(dyad, player) %>%
summarize(queried = sum(queried)) %>%
ungroup() %>%
group_by(dyad) %>%
mutate(queriedMost = max(queried),
queriedLeast = min(queried)) %>%
ungroup()
df <- slice(df, seq(1, dim(df)[1], 2))
head(df)
dim(df)
plot(df$queriedMost, df$queriedLeast)
x = unlist(df$queriedMost)
y = unlist(df$queriedLeast)
cor.test(x, y, method=c("pearson", "kendall", "spearman"))
setwd("~/Repositorios/SPUoDLL")
###########################################
###########################################
# PERFORMANCES
###########################################
###########################################
data = read.csv('performances.csv')
data$treatment = as.factor(data$treatment)
data$queried = as.integer(data$queried)
fun <- function(x) {
if (is.na(x)) {return(0)}
else if (x==0) {return(0)}
else {return(1)}
}
data$queried = unlist(lapply(data$queried, FUN = fun))
data_training = data[data['stage']=='Training rounds',]
data_training = data[data['stage']=='Training rounds',]
# head(data_training)
describeBy(data_training$accuracy, data_training$treatment)
model = glmer(
'accuracy ~ treatment + (treatment|round)',
data = data_training,
family = binomial
)
library(nlme)
model = glmer(
'accuracy ~ treatment + (treatment|round)',
data = data_training,
family = binomial
)
# library(lme4)
library(psych)
model = glmer(
'accuracy ~ treatment + (treatment|round)',
data = data_training,
family = binomial
)
# library(lme4)
library(psych)
library(dplyr)
library(nlme)
library(tidyverse) # data wrangling and visualization
library(sjPlot)    # to visualizing mixed-effects models
library(effects)   # to visualizing mixed-effects models
library(lmerTest)  # p-values for MEMs based on the Satterthwaite approximation
library(report)    # mainly for an "report" function
library(emmeans)   # post-hoc analysis
library(knitr)     # beautifying tables
library(sjstats)   # ICC - intraclass-correlation coefficient
library(caret)     # ML, model comparison & utility functions
library(ggplot2)
library(lawstat)
library(comprehenr)
data_training = data[data['stage']=='Training rounds',]
# head(data_training)
describeBy(data_training$accuracy, data_training$treatment)
model = glmer(
'accuracy ~ treatment + (treatment|round)',
data = data_training,
family = binomial
)
summary(model)
head(data_training)
model = glmer(
'accuracy ~ treatment + (treatment|round) + (player|round)',
data = data_training,
family = binomial
)
model = glmer(
'accuracy ~ treatment + (treatment|round) + (treatment|round)',
data = data_training,
family = binomial
)
summary(model)
model = glmer(
'accuracy ~ treatment + (treatment|round) + (treatment|player)',
data = data_training,
family = binomial
)
summary(model)
model = glmer(
'accuracy ~ treatment + (treatment|round|player)',
data = data_training,
family = binomial
)
