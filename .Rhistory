))
describeBy(df_novices$accuracy, df_novices$Group)
df_pair <- df_pair %>%
group_by(player) %>%
mutate(
m_queried = mean(queried)
)
df_pair <- data %>%
filter(stage == 'Game rounds') %>%
filter(expert_dog == 'False') %>%
filter(treatment == 'paired') %>%
select(treatment, player, round, accuracy,queried)
head(df_pair)
df_pair <- df_pair %>%
group_by(player) %>%
mutate(
m_queried = mean(queried)
)
head(df_pair)
q <- list(.25,.5,.75,1)
quarts <- to_vec(for(i in q) quantile(df_pair$m_queried, i)[[1]])
quarts <- c(0,quarts)
quarts
df_novices = df_pair %>%
mutate(Group = cut(
m_queried,
breaks = quarts,
# labels = c('very low', 'normal'),
labels = c('very low', 'low', 'mid', 'high'),
include.lowest = TRUE
)) %>%
filter(queried == 0)
describeBy(df_novices$accuracy, df_novices$Group)
q <- list(.5,1)
quarts <- to_vec(for(i in q) quantile(df_pair$m_queried, i)[[1]])
quarts <- c(0,quarts)
quarts
df_novices = df_pair %>%
mutate(Group = cut(
m_queried,
breaks = quarts,
# labels = c('very low', 'normal'),
labels = c('very low', 'low', 'mid', 'high'),
include.lowest = TRUE
)) %>%
filter(queried == 0)
df_pair <- data %>%
filter(stage == 'Game rounds') %>%
filter(expert_dog == 'False') %>%
filter(treatment == 'paired') %>%
select(treatment, player, round, accuracy,queried)
head(df_pair)
df_pair <- df_pair %>%
group_by(player) %>%
mutate(
m_queried = mean(queried)
)
head(df_pair)
q <- list(.5,1)
quarts <- to_vec(for(i in q) quantile(df_pair$m_queried, i)[[1]])
quarts <- c(0,quarts)
quarts
df_novices = df_pair %>%
mutate(Group = cut(
m_queried,
breaks = quarts,
# labels = c('very low', 'normal'),
labels = c('very low', 'low', 'mid', 'high'),
include.lowest = TRUE
)) %>%
filter(queried == 0)
describeBy(df_novices$accuracy, df_novices$Group)
df_pair <- data %>%
filter(stage == 'Game rounds') %>%
filter(expert_dog == 'False') %>%
filter(treatment == 'paired') %>%
select(treatment, player, round, accuracy,queried)
head(df_pair)
df_pair <- df_pair %>%
group_by(player) %>%
mutate(
m_queried = mean(queried)
)
head(df_pair)
q <- list(.5,1)
quarts <- to_vec(for(i in q) quantile(df_pair$m_queried, i)[[1]])
quarts <- c(0,quarts)
quarts
df_novices = df_pair %>%
mutate(Group = cut(
m_queried,
breaks = quarts,
labels = c('very low', 'normal'),
#    labels = c('very low', 'low', 'mid', 'high'),
include.lowest = TRUE
)) %>%
filter(queried == 0)
describeBy(df_novices$accuracy, df_novices$Group)
CrossTable(df_novices$accuracy, df_novices$Group,
prop.r=FALSE, prop.c=TRUE, prop.t=FALSE,
prop.chisq=FALSE, chisq = TRUE, fisher=FALSE, mcnemar=FALSE,
resid=FALSE, sresid=FALSE, asresid=FALSE,
missing.include=FALSE,)
library(gmodels)
s
CrossTable(df_novices$accuracy, df_novices$Group,
prop.r=FALSE, prop.c=TRUE, prop.t=FALSE,
prop.chisq=FALSE, chisq = TRUE, fisher=FALSE, mcnemar=FALSE,
resid=FALSE, sresid=FALSE, asresid=FALSE,
missing.include=FALSE,)
df_solo <- data %>%
filter(stage == 'Game rounds') %>%
filter(expert_dog == 'False') %>%
filter(treatment == 'solo') %>%
select(treatment, player, round, accuracy)
head(df_solo)
df_pair <- data %>%
filter(stage == 'Game rounds') %>%
filter(expert_dog == 'False') %>%
filter(treatment == 'paired') %>%
select(treatment, player, round, accuracy, queried)
head(df_pair)
df_solo <- data %>%
filter(stage == 'Game rounds') %>%
filter(expert_dog == 'False') %>%
filter(treatment == 'solo') %>%
select(treatment, player, round, accuracy)
head(df_solo)
df_pair <- data %>%
filter(stage == 'Game rounds') %>%
filter(expert_dog == 'False') %>%
filter(treatment == 'paired') %>%
filter(queried == 0) %>%
select(treatment, player, round, accuracy)
head(df_pair)
df <- rbind(df_solo, df_pair)
head(df)
model = glmer(
'accuracy ~ treatment + (treatment|round)',
data = df,
family = binomial
)
summary(model)
setwd("~/SPUoDLL")
# library(lme4)
library(psych)
library(dplyr)
library(nlme)
library(tidyverse) # data wrangling and visualization
library(sjPlot)    # to visualizing mixed-effects models
library(effects)   # to visualizing mixed-effects models
library(lmerTest)  # p-values for MEMs based on the Satterthwaite approximation
library(report)    # mainly for an "report" function
library(emmeans)   # post-hoc analysis
library(knitr)     # beautifying tables
library(sjstats)   # ICC - intraclass-correlation coefficient
library(caret)     # ML, model comparison & utility functions
library(ggplot2)
library(lawstat)
library(comprehenr)
###########################################
###########################################
# PERFORMANCES
###########################################
###########################################
data = read.csv('performances.csv')
data$treatment = as.factor(data$treatment)
data$queried = as.integer(data$queried)
fun <- function(x) {
if (is.na(x)) {return(0)}
else if (x==0) {return(0)}
else {return(1)}
}
data$queried = unlist(lapply(data$queried, FUN = fun))
###########################################
###########################################
# SELF-REPORT OF UNDERSTANDING
###########################################
###########################################
data = read.csv('rep-understanding.csv')
data$report = as.integer(data$report)
head(data)
# Difference of report means
df = data %>%
filter(expertise == 'experts') %>%
select(treatment,player,report,accuracy)
# head(df)
describeBy(df$report, df$treatment)
x = unlist(df %>% filter(treatment == 'paired') %>% select(report))
y = unlist(df %>% filter(treatment == 'solo') %>% select(report))
t.test(x, y, alternative = "two.sided", var.equal = FALSE)
wilcox.test(x, y, alternative = "two.sided")
# Correlations
df_experts = data %>%
filter(expertise == 'experts') %>%
filter(treatment == 'paired') %>%
filter(accuracy > .2) %>% # leave out outlier
select(treatment,player,report,accuracy,player_responded)
head(df_experts)
x = unlist(df_experts['report'])
y = unlist(df_experts['accuracy'])
cor.test(x, y, method=c("pearson", "kendall", "spearman"))
# Correlations
df_experts = data %>%
filter(expertise == 'experts') %>%
filter(treatment == 'solo') %>%
select(treatment,player,report,accuracy,player_responded)
head(df_experts)
x = unlist(df_experts['report'])
y = unlist(df_experts['accuracy'])
cor.test(x, y, method=c("pearson", "kendall", "spearman"))
#############################
# Paired vs. solo NOVICES
#############################
df <- data %>%
filter(expertise == 'novices') %>%
select(treatment,player,report,accuracy)
# head(df)
describeBy(df$report, df$treatment)
x = unlist(df %>% filter(treatment == 'paired') %>% select(report))
y = unlist(df %>% filter(treatment == 'solo') %>% select(report))
t.test(x, y, alternative = "two.sided", var.equal = FALSE)
wilcox.test(x, y, alternative = "two.sided")
# Correlations SOLO
df_novices = data %>%
filter(expertise == 'novices') %>%
filter(treatment == 'solo') %>%
select(treatment,player,report,accuracy)
head(df_novices)
x = unlist(df_novices['report'])
y = unlist(df_novices['accuracy'])
cor.test(x, y, method=c("pearson", "kendall", "spearman"))
# Correlations PAIRED
df_novices = data %>%
filter(expertise == 'novices') %>%
filter(treatment == 'paired') %>%
select(treatment,player,report,accuracy,answered)
head(df_novices)
x = unlist(df_novices['report'])
y = unlist(df_novices['accuracy'])
cor.test(x, y, method=c("pearson", "kendall", "spearman"))
y = unlist(df_novices['answered'])
cor.test(x, y, method=c("pearson", "kendall", "spearman"))
setwd("~/SPUoDLL")
# library(lme4)
library(psych)
library(dplyr)
library(nlme)
library(tidyverse) # data wrangling and visualization
library(sjPlot)    # to visualizing mixed-effects models
library(effects)   # to visualizing mixed-effects models
library(lmerTest)  # p-values for MEMs based on the Satterthwaite approximation
library(report)    # mainly for an "report" function
library(emmeans)   # post-hoc analysis
library(knitr)     # beautifying tables
library(sjstats)   # ICC - intraclass-correlation coefficient
library(caret)     # ML, model comparison & utility functions
library(ggplot2)
library(lawstat)
library(comprehenr)
###########################################
###########################################
# PERFORMANCES
###########################################
###########################################
data = read.csv('performances.csv')
data$treatment = as.factor(data$treatment)
data$queried = as.integer(data$queried)
fun <- function(x) {
if (is.na(x)) {return(0)}
else if (x==0) {return(0)}
else {return(1)}
}
data$queried = unlist(lapply(data$queried, FUN = fun))
head(data)
head(data)
dyads <- unique(data$dyad)
dyads
print(d)
dyads <- list(unique(data$dyad))
for (d in dyads) {
print(d)
}
for (d in dyads) {
df <- data[data$dyad == d]
head(df)
}
df <- data[data$dyad == d,]
dyads <- list(unique(data$dyad))
for (d in dyads) {
df <- data[data$dyad == d,]
head(df)
}
for (d in dyads) {
df <- data %>% filter(dyad == d)
head(df)
}
d <- dyads[1]
d
dyads <- unique(data$dyad)
d <- dyads[1]
d
for (d in dyads) {
df <- data %>% filter(dyad == d)
head(df)
}
print(head(df))
for (d in dyads) {
df <- data %>% filter(dyad == d)
print(head(df))
}
for (d in dyads) {
df <- data %>%
filter(dyad == d) %>%
summarize(queried = sum)
print(head(df))
}
for (d in dyads) {
df <- data %>%
filter(dyad == d) %>%
summarize(queried = sum(queried))
print(head(df))
}
for (d in dyads) {
df <- data %>%
filter(dyad == d) %>%
group_by(player) %>%
summarize(queried = sum(queried))
print(head(df))
}
head(data)
df <- data %>%
filter(dyad == d) %>%
group_by(player) %>%
summarize(queried = sum(queried))
head(df)
dim(df)
df <- data %>%
group_by(dyad, player) %>%
summarize(queried = sum(queried))
df <- data %>%
group_by(dyad, player) %>%
mutate(queried = sum(queried))
dim(df)
df <- data %>%
select(dyad, player, queried) %>%
group_by(dyad, player) %>%
mutate(queried = sum(queried))
dim(df)
dim(data)
df <- data %>%
select(dyad, player, queried) %>%
group_by(dyad, player) %>%
summarize(queried = sum(queried))
dim(df)
head(df)
head(data)
df <- data %>%
filter(treatment == 'dyad') %>%
select(dyad, player, queried) %>%
group_by(dyad, player) %>%
summarize(queried = sum(queried))
dim(df)
head(data)
dim(data)
unique(data$treatment)
df <- data %>%
filter(treatment == 'paired') %>%
filter(stage == 'Training rounds') %>%
select(dyad, player, queried) %>%
group_by(dyad, player) %>%
summarize(queried = sum(queried))
dim(df)
head(df)
dim(df)[1]
rep(1, 10)
rep(c(1,2), 10)
ply <- rep(c(1,2), dim(df)[1])
ply
ply <- rep(c(1,2), dim(df)[1]/2)
ply
df$ply <- ply
head(df)
library(tidyr)
df2 <- spread(df, key = dyad, value = queried)
head(df2)
df2 <- spread(df, key = ply, value = queried)
head(df2)
head(df)
head(data)
dim(data)
unique(data$treatment)
df <- data %>%
filter(treatment == 'paired') %>%
filter(stage == 'Training rounds') %>%
select(dyad, player, queried) %>%
group_by(dyad, player) %>%
summarize(queried = sum(queried))
ply <- rep(c(1,2), dim(df)[1]/2)
df$player <- ply
head(df)
df2 <- spread(df, key = ply, value = queried)
head(df2)
df2 <- spread(df, key = player, value = queried)
head(df2)
dim(df2)
plot(df2$`1`, df2$`2`)
df <- data %>%
filter(treatment == 'paired') %>%
filter(stage == 'Game rounds') %>%
select(dyad, player, queried) %>%
group_by(dyad, player) %>%
summarize(queried = sum(queried))
ply <- rep(c(1,2), dim(df)[1]/2)
df$player <- ply
head(df)
library(tidyr)
df2 <- spread(df, key = player, value = queried)
head(df2)
dim(df2)
plot(df2$`1`, df2$`2`)
x = unlist(df2$`1`)
y = unlist(df2$`2`)
cor.test(x, y, method=c("pearson", "kendall", "spearman"))
head(data)
df <- data %>%
filter(treatment == 'paired') %>%
filter(stage == 'Game rounds') %>%
select(dyad, player, queried) %>%
group_by(dyad, player) %>%
summarize(queried = sum(queried))
head(df)
# ply <- rep(c(1,2), dim(df)[1]/2)
ply <- appply(df, 1, get_max, data=df)
# ply <- rep(c(1,2), dim(df)[1]/2)
ply <- apply(df, 1, get_max, data=df)
get_max <- function(d, p, data) {
df <- data %>%
filter(dyad == d)
pareja <- df$queried
if (p == max(pareja)) {
return('mostActive')
} else {
return('leastActive')
}
}
# ply <- rep(c(1,2), dim(df)[1]/2)
ply <- apply(df, 1, get_max, data=df)
# ply <- rep(c(1,2), dim(df)[1]/2)
ply <- apply(df, 1, get_max(df['dyad'],df['queried']), data=df)
# ply <- rep(c(1,2), dim(df)[1]/2)
ply <- apply(df, 1, get_max(df['dyad'],df['queried'], df))
head(data)
df <- data %>%
filter(treatment == 'paired') %>%
filter(stage == 'Game rounds') %>%
select(dyad, player, queried) %>%
group_by(dyad, player) %>%
summarize(queried = sum(queried),
queriedMost = max(queried),
qieriedLeast = min(queried))
head(df)
df <- data %>%
filter(treatment == 'paired') %>%
filter(stage == 'Game rounds') %>%
select(dyad, player, queried) %>%
group_by(dyad, player) %>%
summarize(queried = sum(queried),
queriedMost = max(queried),
queriedLeast = min(queried))
head(df)
df <- data %>%
filter(treatment == 'paired') %>%
filter(stage == 'Game rounds') %>%
select(dyad, player, queried) %>%
group_by(dyad) %>%
summarize(queriedMost = max(queried),
queriedLeast = min(queried))
head(df)
df <- data %>%
filter(treatment == 'paired') %>%
filter(stage == 'Game rounds') %>%
select(dyad, player, queried) %>%
group_by(dyad, player) %>%
summarize(queried = sum(queried)) %>%
ungroup() %>%
group_by(dyad) %>%
mutate(queriedMost = max(queried),
queriedLeast = min(queried)) %>%
ungroup()
head(df)
dim(df)
df1 <- slice(df, c(1,3))
head(df1)
df <- data %>%
filter(treatment == 'paired') %>%
filter(stage == 'Game rounds') %>%
select(dyad, player, queried) %>%
group_by(dyad, player) %>%
summarize(queried = sum(queried)) %>%
ungroup() %>%
group_by(dyad) %>%
mutate(queriedMost = max(queried),
queriedLeast = min(queried)) %>%
ungroup()
df <- slice(df, seq(1, dim(df)[1], 2))
head(df)
dim(df)
plot(df$queriedMost, df$queriedLeast)
x = unlist(df$queriedMost)
y = unlist(df$queriedLeast)
cor.test(x, y, method=c("pearson", "kendall", "spearman"))
