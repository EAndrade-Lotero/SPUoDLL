setwd("~/Repositorios/SPUoDLL")
library(psych)
library(dplyr)
library(nlme)
library(tidyverse) # data wrangling and visualization
library(sjPlot)    # to visualizing mixed-effects models
library(effects)   # to visualizing mixed-effects models
library(lmerTest)  # p-values for MEMs based on the Satterthwaite approximation
library(report)    # mainly for an "report" function
library(emmeans)   # post-hoc analysis
library(knitr)     # beautifying tables
library(sjstats)   # ICC - intraclass-correlation coefficient
library(caret)     # ML, model comparison & utility functions
library(ggplot2)
library(lawstat)
library(comprehenr)
###########################################
###########################################
# PERFORMANCES
###########################################
###########################################
data = read.csv('performances.csv')
data$treatment = as.factor(data$treatment)
data$queried = as.integer(data$queried)
fun <- function(x) {
if (is.na(x)) {return(0)}
else if (x==0) {return(0)}
else {return(1)}
}
data$queried = unlist(lapply(data$queried, FUN = fun))
data_training = data[data['stage']=='Training rounds',]
data_training = data_training[data_training['round']>23,]
# head(data_training)
describeBy(data_training$accuracy, data_training$treatment)
model = glmer(
'accuracy ~ treatment + (treatment|player) + (treatment|round)',
data = data_training,
family = binomial
)
summary(model)
model = glmer(
'accuracy ~ treatment + (treatment|round)',
data = data_training,
family = binomial
)
summary(model)
data_training = data[data['stage']=='Training rounds',]
data_training = data_training[data_training['round']>23,]
# head(data_training)
describeBy(data_training$accuracy, data_training$treatment)
model = glmer(
'accuracy ~ treatment + (treatment|round)',
data = data_training,
family = binomial
)
summary(model)
model = glmer(
'accuracy ~ treatment + (treatment|player) + (treatment|round)',
data = data_training,
family = binomial
)
summary(model)
data_training = data[data['stage']=='Training rounds',]
head(data_training)
describeBy(data_training$accuracy, data_training$treatment)
model = glmer(
'accuracy ~ treatment + (treatment|round) + (treatment|player)',
data = data_training,
family = binomial
)
summary(model)
data_game_experts = data[data['stage']=='Game rounds',]
data_game_experts = data_game_experts[data_game_experts['expert_dog']=='True',]
# head(data_game_experts)
describeBy(data_game_experts$accuracy, data_game_experts$treatment)
model = glmer(
'accuracy ~ treatment + (treatment|player) + (treatment|round)',
data = data_game_experts,
family = binomial
)
summary(model)
data_game_novices = data[data['stage']=='Game rounds',]
data_game_novices = data_game_novices[data_game_novices['expert_dog']=='False',]
# head(data_game_novices)
describeBy(data_game_novices$accuracy, data_game_novices$treatment)
model = glmer(
'accuracy ~ treatment + (treatment|player) + (treatment|round)',
data = data_game_novices,
family = binomial
)
summary(model)
data_game_novices = data[data['stage']=='Game rounds',]
data_game_novices = data_game_novices[data_game_novices['treatment']=='paired',]
data_game_novices = data_game_novices[data_game_novices['expert_dog']=='False',]
# head(data_game_novices)
describeBy(data_game_novices$accuracy, data_game_novices$queried)
model = glmer(
'accuracy ~ queried + (queried|player) + (queried|round)',
data = data_game_novices,
family = binomial
)
summary(model)
data_game_novices = data[data['stage']=='Game rounds',]
data_game_novices = data_game_novices[data_game_novices['treatment']=='paired',]
data_game_novices = data_game_novices[data_game_novices['expert_dog']=='False',]
# head(data_game_novices)
describeBy(data_game_novices$accuracy, data_game_novices$queried)
model = glmer(
'accuracy ~ queried + (1|player) + (1|round)',
data = data_game_novices,
family = binomial
)
summary(model)
